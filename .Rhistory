points(x[y_cluster8==4,],col='black')
points(x[y_cluster8==5,],col='yellow')
points(x[y_cluster8==6,],col='purple')
points(x[y_cluster8==7,],col='cyan')
points(x[y_cluster8==8,],col='orange')
d  <- daisy(x)
sk2 <- silhouette(y_cluster2, d)
sk4 <- silhouette(y_cluster4, d)
sk8 <- silhouette(y_cluster8, d)
mean(sk2[,3])
mean(sk4[,3])
mean(sk8[,3])
library(cluster)
flores_data<-read.csv("flores.csv", header=T, sep=",")
knitr::opts_chunk$set(echo = TRUE)
# Cargo els datasets d'entrenament i testeig
dataset <- read.csv("./train.csv",header=T,sep=",")
# En miro la mida i tipus d'atributs amb la funcionalitat str()
str(dataset)
# Resum estadistic del dataset:
summary(dataset)
# Mostro els valors nuls que conté cada columna
colSums(is.na(dataset))
# Mostro els valors vuits que conté cada columna de text
colSums(dataset=="")
# Instalo la llibreria zoo si no està instalada i la crido
if (!require('zoo')) install.packages("zoo"); library('zoo')
# Interpolo els valors de l'atribut Age i els guardo a la mateixa columna del dataset
dataset$Age <- na.approx(dataset$Age)
# Elimino la columna Cabin del dataset
dataset <- dataset[ , !(names(dataset) %in% c("Cabin"))]
# Converteixo els valors inexistents de la columna Embarked en valors nuls
dataset <- within(dataset, Embarked[Embarked==""] <- NA)
# COnverteixo la columna EMbarked en factorial
dataset$Embarked <- as.factor(dataset$Embarked)
# Interpolo els valors nuls de la columna Embarked
dataset$Embarked <- na.approx(dataset$Embarked)
# Referències:
# https://stackoverflow.com/questions/50166851/r-na-approx-error-need-at-least-two-non-na-values-to-interpolate
# https://stackoverflow.com/questions/25625476/interpolate-multiple-na-values-with-r
# https://stackoverflow.com/questions/8214303/conditional-replacement-of-values-in-a-data-frame
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
# https://stackoverflow.com/questions/4605206/drop-data-frame-columns-by-name
colSums(is.na(dataset))
colSums(dataset=="")
print(length(unique(dataset$PassengerId)))
print(length(unique(dataset$Name)))
print(length(unique(dataset$Ticket)))
# Referències:
# https://discuss.analyticsvidhya.com/t/how-to-count-number-of-distinct-values-in-a-column-of-a-data-table-in-r/1124
dataset <- dataset[ , !(names(dataset) %in% c('PassengerId', 'Name', 'Ticket'))]
# Si el valor és male afegeixo un 1 i si es female afegeixo un 0
dataset$Sex <- ifelse(dataset$Sex=="male", 1, 0)
# Instalo la llibreria zoo si no està instalada i la crido
if (!require('ggplot2')) install.packages("ggplot2"); library('ggplot2')
# Exrec els outliers de l'atribut Age, SibSp, Parch i Fare
age_outliers    <- boxplot.stats(dataset$Age)$out
sibsp_outliers  <- boxplot.stats(dataset$SibSp)$out
parch_outliers  <- boxplot.stats(dataset$Parch)$out
fare_outliers   <- boxplot.stats(dataset$Fare)$out
# Afegeixo els index de de les files on posiblemenet hi ha outliers
outliers_index <- c(which(dataset$Age %in% c(age_outliers)),
which(dataset$SibSp %in% c(sibsp_outliers)),
which(dataset$Parch %in% c(parch_outliers)),
which(dataset$Fare %in% c(fare_outliers)))
# Mostro per pantalla el número d'outliers detectats per la funcionalitat boxplot
cat('There is', length(unique(outliers_index)), 'outliers, it is equal to a', length(unique(outliers_index))/891*100 ,'% of the data')
# A continuació genero un boxplot per cada un d'aquests 4 atributs per separat.
ggplot(dataset) +
aes(x = "", y = Age) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = SibSp) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = Parch) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = Fare) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
# Referències:
# https://statsandr.com/blog/outliers-detection-in-r/#boxplot
# https://www.geeksforgeeks.org/adding-elements-in-a-vector-in-r-programming-append-method/
# https://www.tutorialspoint.com/how-to-concatenate-two-or-more-vectors-in-r
# https://stackoverflow.com/questions/15589601/print-string-and-variable-contents-on-the-same-line-in-r
# Extrec el valor màxim de fare_outliers i em quedo amb les files on el valor de Fare és diferent a aquest
dataset <- dataset[dataset$Fare != max(fare_outliers),]
# Referències:
# https://statisticsglobe.com/r-max-min-function/
# https://statisticsglobe.com/r-remove-row-from-data-frame-condition
# Mostro un resum de la variança explicada pels difernets atributs del dataset amb els valors escalats.
summary(prcomp(dataset, center = TRUE, scale. = TRUE))
# Referències:
# https://bookdown.org/rdpeng/exdata/dimension-reduction.html
# https://www.datacamp.com/community/tutorials/pca-analysis-r
# Defineixo l'atribut Priority
dataset['Priority'] <- NA
# Per cada fila del dataset
for (i in 1:nrow(dataset)) {
# Si és un menor:
if (dataset[i, 'Age'] < 18.0) {
# Li asigno directament el valor de la seva clase
dataset[i, 'Priority'] <- dataset[i, 'Pclass']
# Si té menys de 40 anys
} else if (dataset[i, 'Age'] < 40.0) {
# Si és una dona li asigno el valor 3 + el valor de la seva clase
if (dataset[i, 'Sex'] == 0) {
dataset[i, 'Priority'] <- 3 + dataset[i, 'Pclass']
# Si és un home li asigno el valor 6 + el valor de la seva clase
} else {
dataset[i, 'Priority'] <- 6 + dataset[i, 'Pclass']
}
# Finalment, si té 40 o més anys
} else {
# Si és una dona li asigno el valor 9 + el valor de la seva clase
if (dataset[i, 'Sex'] == 0) {
dataset[i, 'Priority'] <- 9 + dataset[i, 'Pclass']
# Si és un home li asigno el valor 12 + el valor de la seva clase
} else {
dataset[i, 'Priority'] <- 12 + dataset[i, 'Pclass']
}
}
}
# Referències:
# https://www.marsja.se/how-to-add-an-empty-column-to-dataframe-in-r-with-tibble/
# https://stackoverflow.com/questions/1699046/for-each-row-in-an-r-dataframe/1699296
# https://stackoverflow.com/questions/14924935/using-r-convert-data-frame-to-simple-vector
# https://www.geeksforgeeks.org/how-to-change-row-values-based-on-a-column-value-in-r-dataframe/
summary(dataset$Priority)
colSums(is.na(dataset))
summary(prcomp(dataset, center = TRUE, scale. = TRUE))
knitr::opts_chunk$set(echo = TRUE)
# Cargo el dataset d'entrenament
dataset <- read.csv("./train.csv",header=T,sep=",")
# En miro la mida i tipus d'atributs amb la funcionalitat str()
str(dataset)
# Resum estadistic del dataset
summary(dataset)
# Mostro els valors nuls que conté cada columna
colSums(is.na(dataset))
# Mostro els valors vuits que conté cada columna de text
colSums(dataset=="")
# Instalo la llibreria zoo si no està instalada i la crido
if (!require('zoo')) install.packages("zoo"); library('zoo')
# Interpolo els valors de l'atribut Age i els guardo a la mateixa columna
dataset$Age <- na.approx(dataset$Age)
# Elimino la columna Cabin del dataset
dataset <- dataset[ , !(names(dataset) %in% c("Cabin"))]
# Converteixo els valors inexistents de la columna Embarked en valors nuls
dataset <- within(dataset, Embarked[Embarked==""] <- NA)
# Converteixo la columna Embarked en factorial
dataset$Embarked <- as.factor(dataset$Embarked)
# Interpolo els valors nuls de la columna Embarked
dataset$Embarked <- na.approx(dataset$Embarked)
# Referències:
# https://stackoverflow.com/questions/50166851/r-na-approx-error-need-at-least-two-non-na-values-to-interpolate
# https://stackoverflow.com/questions/25625476/interpolate-multiple-na-values-with-r
# https://stackoverflow.com/questions/8214303/conditional-replacement-of-values-in-a-data-frame
# https://stackoverflow.com/questions/20637360/convert-all-data-frame-character-columns-to-factors
# https://stackoverflow.com/questions/4605206/drop-data-frame-columns-by-name
colSums(is.na(dataset))
colSums(dataset=="")
print(length(unique(dataset$PassengerId)))
print(length(unique(dataset$Name)))
print(length(unique(dataset$Ticket)))
# Referències:
# https://discuss.analyticsvidhya.com/t/how-to-count-number-of-distinct-values-in-a-column-of-a-data-table-in-r/1124
dataset <- dataset[ , !(names(dataset) %in% c('PassengerId', 'Name', 'Ticket'))]
# Si el valor és male afegeixo un 1 i si és female afegeixo un 0
dataset$Sex <- ifelse(dataset$Sex=="male", 1, 0)
# Instalo la llibreria zoo si no està instalada i la crido
if (!require('ggplot2')) install.packages("ggplot2"); library('ggplot2')
# Extrec els outliers de l'atribut Age, SibSp, Parch i Fare
age_outliers    <- boxplot.stats(dataset$Age)$out
sibsp_outliers  <- boxplot.stats(dataset$SibSp)$out
parch_outliers  <- boxplot.stats(dataset$Parch)$out
fare_outliers   <- boxplot.stats(dataset$Fare)$out
# Afegeixo els index de de les files on posiblemenet hi ha outliers
outliers_index <- c(which(dataset$Age %in% c(age_outliers)),
which(dataset$SibSp %in% c(sibsp_outliers)),
which(dataset$Parch %in% c(parch_outliers)),
which(dataset$Fare %in% c(fare_outliers)))
# Mostro per pantalla el número d'outliers detectats per la funcionalitat boxplot
cat('There is', length(unique(outliers_index)), 'outliers, it is equal to a', length(unique(outliers_index))/891*100 ,'% of the data')
# A continuació genero un boxplot per cada un d'aquests 4 atributs per separat.
ggplot(dataset) +
aes(x = "", y = Age) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = SibSp) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = Parch) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(dataset) +
aes(x = "", y = Fare) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
# Referències:
# https://statsandr.com/blog/outliers-detection-in-r/#boxplot
# https://www.geeksforgeeks.org/adding-elements-in-a-vector-in-r-programming-append-method/
# https://www.tutorialspoint.com/how-to-concatenate-two-or-more-vectors-in-r
# https://stackoverflow.com/questions/15589601/print-string-and-variable-contents-on-the-same-line-in-r
# Extrec el valor màxim de fare_outliers i em quedo amb les files on el valor de Fare és diferent a aquest
dataset <- dataset[dataset$Fare != max(fare_outliers),]
# Referències:
# https://statisticsglobe.com/r-max-min-function/
# https://statisticsglobe.com/r-remove-row-from-data-frame-condition
# Mostro un resum de la variança explicada pels difernets atributs del dataset amb els valors escalats.
summary(prcomp(dataset, center = TRUE, scale. = TRUE))
# Referències:
# https://bookdown.org/rdpeng/exdata/dimension-reduction.html
# https://www.datacamp.com/community/tutorials/pca-analysis-r
# Defineixo l'atribut Priority
dataset['Priority'] <- NA
# Per cada fila/pasatger del dataset
for (i in 1:nrow(dataset)) {
# Si és un menor:
if (dataset[i, 'Age'] < 18.0) {
# Li asigno directament el valor de la seva clase
dataset[i, 'Priority'] <- dataset[i, 'Pclass']
# Si té menys de 40 anys
} else if (dataset[i, 'Age'] < 40.0) {
# Si és una dona li asigno el valor 3 + el valor de la seva clase
if (dataset[i, 'Sex'] == 0) {
dataset[i, 'Priority'] <- 3 + dataset[i, 'Pclass']
# Si és un home li asigno el valor 6 + el valor de la seva clase
} else {
dataset[i, 'Priority'] <- 6 + dataset[i, 'Pclass']
}
# Finalment, si té 40 o més anys
} else {
# Si és una dona li asigno el valor 9 + el valor de la seva clase
if (dataset[i, 'Sex'] == 0) {
dataset[i, 'Priority'] <- 9 + dataset[i, 'Pclass']
# Si és un home li asigno el valor 12 + el valor de la seva clase
} else {
dataset[i, 'Priority'] <- 12 + dataset[i, 'Pclass']
}
}
}
# Referències:
# https://www.marsja.se/how-to-add-an-empty-column-to-dataframe-in-r-with-tibble/
# https://stackoverflow.com/questions/1699046/for-each-row-in-an-r-dataframe/1699296
# https://stackoverflow.com/questions/14924935/using-r-convert-data-frame-to-simple-vector
# https://www.geeksforgeeks.org/how-to-change-row-values-based-on-a-column-value-in-r-dataframe/
summary(dataset$Priority)
colSums(is.na(dataset))
summary(prcomp(dataset, center = TRUE, scale. = TRUE))
# Instalo la llibreria cluster si no està instalada i la crido
if (!require('cluster')) install.packages("cluster"); library('cluster')
# Calculo la matriu de dissimilitud amb la formula generalitzada de Gower
d <- daisy(dataset, metric = "gower")
# Defineixo la llista on agregaré l'estimació de la qualitat de cada un dels clústers que provaré (10 en total) i la llista on faré aquesta mateixa estimació usant la suma dels quadrats de les distàncies dels punts respecte el seu centre
llista_resultats          <- rep(0, 10)
llista_resultats_quadrats <- rep(0, 10)
# Per cada valor en la llista [2,3,4,5,6,7,8,9,10], aplico l'algoritme kmeans al dataset definit amb el valor com a número de clusters i ho guardo a la variable fit. A continaució, li extrec el component cluster i el guardo a la variable y_cluster per tenir així una llista amb el cluster al que pertany cada registre (pasatger del Titanic). Després, obtinc la qualitat del procés d'agregació aplicant la funcionalitat silhouette a la llista y_cluster i usant la matriu de dissimilitud com a objecte dissimilar (dist) on, el resultat obtingut, el guardo a la variable sk. Seguidament, calculo la mitjana de la tercera columna de sk, la qual correspon a la qualitat de l'agrupament, per saber així la qualitat del cluster. Un cop obtingudes totes aquestes dades, creo un títol per al clusterplot que generaré amb la informació sobre el número de clusters i la seva qualitat. Finalment, genero el clusterplot per visualitzar els clusters amb el paràmetre label=1 per a només veure les separacions sense l'identificador de cada punt, guardo la qualitat del cluster a la llista_resultats i el parametre tot.withinss de la variable fit a la llista_resultats_quadrats.
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit                           <- kmeans(dataset, i)
y_cluster                     <- fit$cluster
sk                            <- silhouette(y_cluster, d)
cluster_quality               <- mean(sk[,3])
title                         <- paste(toString(i), "clusters quality:", toString(cluster_quality), sep=" ")
clusplot(dataset, y_cluster, color=TRUE, shade=TRUE, labels=1, lines=0, main=title)
llista_resultats[i]           <- cluster_quality
llista_resultats_quadrats[i]  <- fit$tot.withinss
}
# Mostro per pantalla el plot mostrant els valors de llista_resultats i el plot mostrant els valors de llista_resultats_quadrats:
plot(2:10,llista_resultats[2:10],type="o",pch=19,col="blue",xlab="Clusters",ylab="Siluete", title="Cluster aproximation")
plot(2:10,llista_resultats_quadrats[2:10],type="o",pch=15,col="blue",xlab="Clusters",ylab="Withinss", title="Cluster aproximation")
# Referències:
# https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/daisy
# https://www.rdocumentation.org/packages/cluster/versions/2.1.1/topics/clusplot.default
# https://stackoverflow.com/questions/7201341/how-can-two-strings-be-concatenated
# https://stackoverflow.com/questions/5863097/selecting-only-numeric-columns-from-a-data-frame
# Instalo la llibreria nortest si no està instalada i la crido
if (!require('nortest')) install.packages("nortest"); library('nortest')
# Per cada atribut del dataset (tots són numèrics)
for (i in 1:ncol(dataset)) {
# Si el p-valor és superior a 0.05, és a dir, si segueix una distribució normal, en mostro el nom
if (ad.test(dataset[,i])$p.value > 0.05) {
cat(colnames(dataset)[i])
cat('\n')
}
}
# Per cada columna del dataset menys la primera (correspon a l'atribut supervivència)
for (i in 2:ncol(dataset)) {
# Si el p-valor és superior a 0.05, és a dir, si les variançes són homogènies, en mostro el nom
if (fligner.test(dataset[,1], dataset[,i])$p.value > 0.05) {
cat(colnames(dataset)[i], ' (', fligner.test(dataset[,1], dataset[,i])$p.value, ')')
cat('\n')
}
}
# Referències:
# https://rdrr.io/r/stats/fligner.test.html
# Instalo la llibreria ggplot2, grid i gridExtra si no ho estan i les crido
if (!require('ggplot2')) install.packages("ggplot2"); library('ggplot2')
if (!require('grid')) install.packages("grid"); library('grid')
if (!require('gridExtra')) install.packages("gridExtra"); library('gridExtra')
# Discretitzo la vairable edat per poder-ne fer un gràfic de freqüències
dataset["segment_age"] <- cut(dataset$Age, breaks = c(0,19,40,120), labels = c("0-18", "19-39", "+40"))
# Genero 4 gràfics de barres amb ggplot tot hi indicant els labels i la seva orientació
survival_plot   <- ggplot(dataset,aes(Survived))    + geom_bar() + labs(x="Survived", y="Passenger") + ggtitle("Survival")            + theme(axis.text.x = element_text(angle = 45, vjust = 0.7))
class_plot      <- ggplot(dataset,aes(Pclass))      + geom_bar() + labs(x="Class", y="Passenger")    + ggtitle("Passenger class")     + theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
age_plot        <- ggplot(dataset,aes(segment_age)) + geom_bar() + labs(x="Age", y="Passenger")      + ggtitle("Passengers ages")     + theme(axis.text.x = element_text(angle = 45, vjust = 0.6))
priority_plot   <- ggplot(dataset,aes(Priority))    + geom_bar() + labs(x="Priority", y="Passenger") + ggtitle("Passengers priority") + theme(axis.text.x = element_text(angle = 45, vjust = 0.7))
# Mostro els 4 gràfics en una grid de dos columnes
grid.arrange(survival_plot,class_plot,age_plot,priority_plot,ncol=2)
# Referències:
# https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2
# http://www.sthda.com/english/wiki/wiki.php?id_contents=7930
# He d'usar atributs categorics així que faig les transformacions pertinents:
dataset$Sex_categoric <- ifelse(dataset$Sex==1, 'Male', 'Female')
dataset$Survived_categoric <- ifelse(dataset$Survived==1, 'yes', 'no')
dataset$pclass_categoric <- as.character(dataset$Pclass)
# Mostro la supervivència dels pasaters en funció del seu sexe
ggplot(data = dataset,aes(x=Sex_categoric,fill=Survived_categoric))+geom_bar()+ylab("Count")
# Mostro la supervivència dels pasaters en funció del seu sexe i classe
ggplot(data = dataset,aes(x=Sex_categoric,fill=Survived_categoric))+geom_bar(position="fill")+facet_wrap(~pclass_categoric)+ylab("Frequency")
# Mostro la supervivència dels pasaters en funció del de la seva edat
ggplot(data = dataset,aes(x=segment_age,fill=Survived_categoric))+geom_bar()+ylab("Count")
# Mostro la supervivència dels pasaters en funció del seu sexe i classe
ggplot(data = dataset,aes(x=segment_age,fill=Survived_categoric))+geom_bar(position="fill")+facet_wrap(~pclass_categoric)+ylab("Frequency")
# Defineixo la matriu de correlació com una matriu de dos columnes i, després li asigno nom a aquestes columnes
corr_matrix           <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("correlation", "p-value")
# Per cada columna del dataset menys la primera (correspon a l'atribut supervivència) i les 4 últimes (són els atributs categorics generades per mi)
for (i in 2:(ncol(dataset) - 4)) {
# Aplico el test de Spearman a l'atribut en qüestio en relació a l'atribut Survived
spearman_test =cor.test(dataset[,i],dataset[,1],method = "spearman")
# Genero una matriu d'una fila i dos columnes
pair = matrix(ncol = 2, nrow = 1)
# Extrac els coeficients de correlació i el p-valor del test de Sperman i els afegeixo a aquesta nova matriu on, la correlació l'afegeixo en valor absolut ja que no m'interesa si és positiv ao negativa sinò la seva potència
pair[1][1] = abs(spearman_test$estimate)
pair[2][1] = spearman_test$p.value
# Afegeixo aquesta nova matriu a la matriu de correlació (serà una nova fila d'aquesta)
corr_matrix <-rbind(corr_matrix, pair)
# Indico que l'index d'aquesta nova fila sigui el nom de la columna sobre la que s'ha estudiat la correlació
rownames(corr_matrix)[nrow(corr_matrix)] <-colnames(dataset)[i]
}
# Mostro la matriu de correlació ordenada de més a menys correlació
corr_matrix[order(corr_matrix[,1], decreasing=TRUE),]
# Referències:
# https://www.tutorialspoint.com/how-to-sort-a-matrix-based-on-one-column-in-r
# Instalo la llibreria reshape2 si no ho està i la crido
if (!require('reshape2')) install.packages("reshape2"); library('reshape2')
# Genero la matriu de corrleacions amb els atributs numèrics
correlation_matrix <- round(cor(dataset[ , unlist(lapply(dataset, is.numeric)) ]),2)
# Derriteixo la matriu amb la funcionalitat melt() de la llibreria reshape2
melted_correlation_matrix <- melt(correlation_matrix)
# Plotejo aquesta matriu generada mostrant linies blanques per separar les diferents correlacions i ajustant el text
ggplot(data = melted_correlation_matrix, aes(x=Var1, y=Var2, fill=value)) + geom_tile(color = "white") + theme(axis.text.x = element_text(angle = 45, vjust = 0.8))
# Referències:
# http://www.sthda.com/english/wiki/ggplot2-quick-correlation-matrix-heatmap-r-software-and-data-visualization
# https://stackoverflow.com/questions/5863097/selecting-only-numeric-columns-from-a-data-frame
# Genero una nova columna amb el númeor de membres familairs de cada pasatger, li sumo 1 al contar-loia  ell també
dataset$FamilySize <- dataset$SibSp + dataset$Parch + 1
ggplot(data = dataset ,aes(x=FamilySize,fill=Survived_categoric))+geom_bar()+ylab("Count")
ggplot(data = dataset ,aes(x=FamilySize,fill=Survived_categoric))+geom_bar(position="fill")+ylab("Frequency")
# Supervivència per classe. Aplico prop.table per mostrar-ho en percentatge
table_Pclass <- table(dataset$pclass_categoric, dataset$Survived_categoric)
cat('Survival by Class')
prop.table(table_Pclass, margin = 1)
# Supervivència per edat
table_Age <- table(dataset$segment_age, dataset$Survived_categoric)
cat('\nSurvival by Age')
prop.table(table_Age, margin = 1)
# Supervivència per sexe
table_Sex <- table(dataset$Sex_categoric, dataset$Survived_categoric)
cat('\nSurvival by Sex')
prop.table(table_Sex, margin = 1)
# Adicionalment també miro la supervivència per edat i classe:
table_AgePclass <- table(dataset$Sex_categoric, dataset$Survived_categoric, dataset$pclass_categoric)
cat('\nSurvival by Age and Class\n')
table_AgePclass
# Referències:
# https://www.datacamp.com/community/tutorials/contingency-tables-r
# Instalo la llibreria DescTools si no ho està i la crido
if (!require('DescTools')) install.packages("DescTools"); library('DescTools')
# Test de Cramer-von Mises
CramerV(table_Pclass, correct=TRUE)
CramerV(table_Age, correct=TRUE)
CramerV(table_Sex, correct=TRUE)
# Contingència de Person
ContCoef(table_Pclass, correct=TRUE)
ContCoef(table_Age, correct=TRUE)
ContCoef(table_Sex, correct=TRUE)
# Referències:
# https://www.rdocumentation.org/packages/rcompanion/versions/2.3.25/topics/cramerV
# https://www.rdocumentation.org/packages/misty/versions/0.3.2/topics/cont.coef
# Mostro la classe dels pasatgers en funció del de la seva edat
ggplot(data = dataset,aes(x=segment_age,fill=pclass_categoric))+geom_bar()+ylab("Count")
# Elimino els atributs categorics generats
dataset <- dataset[ , !(names(dataset) %in% c('segment_age', 'Survived_categoric', 'Sex_categoric', 'pclass_categoric', 'FamilySize'))]
# Defineixo una llavor per a que el codi sigui reproduible:
set.seed(12)
# Defineixo un dataset amb la columna que usaré per classificar (survived) i un dataset amb les altres columnes (other_columns)
classify_column <- dataset$Survived
other_columns   <- dataset[ , !(names(dataset) %in% c("Survived"))]
# Obtinc els indexs de 2/3 de les files del dataset
indexes = sample(1:nrow(dataset), size=floor(((3-1)/3)*nrow(dataset)))
# Uso aquests index per seleccionar els valors dels datasets generats que usaré per entrenar el model
train_classify  <- classify_column[indexes]
train_columns   <- other_columns[indexes,]
# Ara, utilitzo els index que no estan aqui inclosos (altre terç de les dades) per definir el conjunt de prova
test_classify  <- classify_column[-indexes]
test_columns   <- other_columns[-indexes,]
# Referència:
# http://rfunction.com/archives/62
# https://r-coder.com/set-seed-r/
# https://cran.r-project.org/web/packages/C50/vignettes/C5.0.html
# Instalo la llibreria C50 si no ho està i la crido
if (!require('C50')) install.packages("C50"); library('C50')
# Defineixo una nova llavor per a que el codi sigui reproduible:
set.seed(121)
# El model C5.0 ncessita que les columnes a usar per classificar siguin de tipus factor
train_classify = as.factor(train_classify)
# Defineixo el model d'arbre de decisió amb regles i com a arbre:
model_as_rules <- C5.0(train_columns, train_classify, rules=TRUE)
model_as_tree <- C5.0(train_columns, train_classify)
# Referència:
# https://cran.r-project.org/web/packages/C50/vignettes/C5.0.html
# https://topepo.github.io/C5.0/reference/C5.0.html
# https://www.rdocumentation.org/packages/C50/versions/0.1.3.1/topics/predict.C5.0
# Mostro les regles generades
summary(model_as_rules)
# Mostro la forma de l'arbre de decisió
plot(model_as_tree)
# Referències:
# https://topepo.github.io/C5.0/reference/plot.C5.0.html
# Instalo la llibreria gmodels si no ho està i la crido
if (!require('gmodels')) install.packages("gmodels"); library('gmodels')
# Genero la predicció
predict <- predict(model_as_tree,test_columns)
# Mostro una matriu de confusió amb els valors de la predicció
CrossTable(test_classify, predict,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
# Referències:
# https://www.kaggle.com/shravan3273/credit-approval-model-using-decision-tree
# https://www.rdocumentation.org/packages/gmodels/versions/2.18.1/topics/CrossTable
# Defineixo una nova llavor per a que el codi sigui reproduible:
set.seed(1212)
# Converteixo la columna per classificar en tipus factor
classify_column <- as.factor(classify_column)
# Defineixo el model d'arbre de decisió:
final_model <- C5.0(other_columns, classify_column)
# Cargo el dataset de testeig que entregaré
dataset_test <- read.csv("./test.csv",header=T,sep=",")
# Extrec la columna indicant l'ID del pasatger per a l'entrega de resultats
passenger_id <- dataset_test$PassengerId
# Elimino les columnes sobrants
dataset_test <- dataset_test[ , !(names(dataset_test) %in% c('Ticket', 'Cabin', 'Name', 'Pas', 'PassengerId'))]
# Converteixo l'atribut Sex en numèric
dataset_test$Sex <- ifelse(dataset_test$Sex=="male", 1, 0)
# Converteixo la columna Embarked en factorial, em retornava els valors factorials com a string i he tingut que fer aquetses conversions per obtenir-lo com a numèric
dataset_test$Embarked <- as.factor(as.numeric(as.factor(dataset_test$Embarked)))
# En mostro un resum estadistic i en comprovo la completesa
summary(dataset_test)
colSums(is.na(dataset_test))
colSums(dataset_test=="")
# Interpolo els valors de l'atribut Age i Fare i els guardo a la mateixa columna del dataset
dataset_test$Age <- na.approx(dataset_test$Age, rule = 2, maxgap = 4, na.rm = FALSE)
dataset_test$Fare <- na.approx(dataset_test$Fare)
# Defineixo i genero l'atribut Priority
dataset_test['Priority'] <- NA
for (i in 1:nrow(dataset_test)) {
if (dataset_test[i, 'Age'] < 18.0) {
dataset_test[i, 'Priority'] <- dataset_test[i, 'Pclass']
} else if (dataset_test[i, 'Age'] < 40.0) {
if (dataset_test[i, 'Sex'] == 0) {
dataset_test[i, 'Priority'] <- 3 + dataset_test[i, 'Pclass']
} else {
dataset_test[i, 'Priority'] <- 6 + dataset_test[i, 'Pclass']
}
} else {
if (dataset_test[i, 'Sex'] == 0) {
dataset_test[i, 'Priority'] <- 9 + dataset_test[i, 'Pclass']
# Si és un home li asigno el valor 12 + el valor de la seva classe
} else {
dataset_test[i, 'Priority'] <- 12 + dataset_test[i, 'Pclass']
}
}
}
# Referències:
# https://stackoverflow.com/questions/55138987/error-replacement-has-1810947-rows-and-data-has-1810956-same-each-time-for-pu
# Genero la predicció final
final_predict <- predict(final_model,dataset_test)
final_predict
# Genero un dataset amb les duess columnes que ha de contenir:
final_dataset <- data.frame(passenger_id, final_predict)
colnames(final_dataset)<- c("PassengerId","Survived")
# Genero el CSV amb el resultat final
write.csv(final_dataset, '.\\gender_submission.csv', row.names = FALSE)
# Referències:
# https://stackoverflow.com/questions/6081439/changing-column-names-of-a-data-frame
# https://datatofish.com/export-dataframe-to-csv-in-r/
# Instalo la llibreria gmodels si no ho està i la crido
if (!require('gmodels')) install.packages("gmodels"); library('gmodels')
# Genero la predicció
predict <- predict(model_as_tree,test_columns)
# Mostro una matriu de confusió amb els valors de la predicció
CrossTable(test_classify, predict,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
# Referències:
# https://www.kaggle.com/shravan3273/credit-approval-model-using-decision-tree
# https://www.rdocumentation.org/packages/gmodels/versions/2.18.1/topics/CrossTable
